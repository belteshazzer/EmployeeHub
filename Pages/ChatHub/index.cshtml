@page
@using EmployeeHub.Models.Dtos
@model EmployeeHub.Pages.ChatHub.IndexModel
@{
    ViewData["Title"] = "Chat";
}


<div class="chat-container">
    <!-- Sidebar -->
    <div class="chat-sidebar" id="chatSidebar">
        <div class="sidebar-header">
            <h3>Chats</h3>
            <button class="btn btn-sm btn-primary" id="newChatBtn" onclick="showNewChatSidebar()">
                <i class="fas fa-plus"></i> New
            </button>
        </div>

        <div class="search-box">
            <input type="text" placeholder="Search conversations..." class="form-control">
        </div>

        <div class="conversation-list" id="conversationList">
            <!-- conversation list dynamically fetched  -->
        </div>
    </div>

    <!-- New Chat Sidebar -->
    <div class="chat-sidebar" id="newChatSidebar" style="display: none;">
        <div class="sidebar-header">
            <h3>New Chat</h3>
            <button class="btn btn-sm btn-secondary" onclick="showChatListSidebar()">
                <i class="fas fa-arrow-left"></i> Back
            </button>
        </div>

        <div class="search-box">
            <input type="text" id="userSearchInput" placeholder="Search by name, role, or department..." class="form-control" oninput="searchUsers()">
        </div>

        <div class="user-list" id="userList">
            <!-- User list will be dynamically populated here -->
        </div>
    </div>

    <!-- Main Chat Area -->
    <div class="chat-main">
        <div class="chat-header">
            <div id="currentChatInfo">
                <input type="hidden" id="currentChatId" value="" />
                <input type="hidden" id="OtherUserId" value="" />

                <h4>Select a conversation</h4>
            </div>
        </div>

        <div class="chat-messages" id="messageContainer">
            <!-- Chat history will be dynamically loaded here -->
        </div>

        <div class="chat-input" id="chatInput" style="display: none;">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
                <div class="input-group-append">
                    <button class="btn btn-primary" id="sendButton" onclick="sendMessage()">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        console.log("Scripts are working!");

        let allUsers = []; // Store all users fetched from the database

        // Show the New Chat sidebar
        window.showNewChatSidebar = function () {
            document.getElementById('chatSidebar').style.display = 'none';
            document.getElementById('newChatSidebar').style.display = 'block';
            fetchAllUsers(); 
        };

        // Show the Chat List sidebar
        function showChatListSidebar() {
            document.getElementById('newChatSidebar').style.display = 'none';
            document.getElementById('chatSidebar').style.display = 'block';
        }

        // Fetch all users from the database
        async function fetchAllUsers() {
            try {
                const response = await fetch('http://localhost:5139/api/auth/users');
                if (response.ok) {
                    const result = await response.json();
                    allUsers = result.data; 
                    console.log("Fetched users:", allUsers);
                    displayUsers(allUsers); 
                } else {
                    console.error("Failed to fetch users.");
                }
            } catch (error) {
                console.error("Error fetching users:", error);
            }
        }

        // Display users in the user list
        function displayUsers(users) {
            const userList = document.getElementById('userList');
            userList.innerHTML = ''; // Clear the list

            users.forEach(user => {
                const userItem = document.createElement('div');
                userItem.className = 'user-item';
                userItem.innerHTML = `
                    <div>
                        <h5>${user.firstName + "  "+user.lastName}</h5>
                        <div class="p-body">
                            <p>${user.department.name || 'No department specified'}</p>
                            <p>${user.role.name || 'No role specified'}</p>
                        </div>
                    </div>
                `;
                userItem.onclick = () => startChat(user.id);
                userList.appendChild(userItem);
            });
        }

        // Search users by name, role, or department
        function searchUsers() {
            const searchInput = document.getElementById('userSearchInput').value.toLowerCase();
            const filteredUsers = allUsers.filter(user =>
                user.firstName.toLowerCase().includes(searchInput) ||
                (user.department && user.department.toLowerCase().includes(searchInput)) 
            );
            displayUsers(filteredUsers);
        }

        // Start a chat with the selected user
        function startChat(userId) {
            console.log("Starting chat with user:", userId);
            // Logic to start a chat with the selected user
            showChatListSidebar(); // Return to the chat list sidebar
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            const receiverUserId = document.getElementById('OtherUserId').value;
            console.log("Sending message:", message, "to user ID:", receiverUserId);    

            if (!message || !receiverUserId) {
                console.error("Message or receiver ID is missing.");
                return;
            }

            try {
                const token = localStorage.getItem("jwtToken");
                const response = await fetch('http://localhost:5139/api/chat/send-message', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ReceiverUserId: receiverUserId,
                        Message: message
                    })
                });

                if (response.ok) {
                    try {
                        const result = await response.json(); // Parse JSON response
                        console.log("Message sent successfully:", result);
                        messageInput.value = '';

                        // Reload chat history for the current chat
                        const currentChatId = document.getElementById('currentChatId').value;
                        if (currentChatId) {
                            loadChatHistory(currentChatId);
                        }
                    } catch (jsonError) {
                        console.error("Failed to parse JSON response:", jsonError);
                        const textResponse = await response.text();
                        console.error("Server response:", textResponse);
                    }
                } else {
                    const errorResponse = await response.text(); // Handle non-JSON error response
                    console.error("Failed to send message:", response.status, errorResponse);
                    alert(`Failed to send message: ${errorResponse}`);
                }
            } catch (error) {
                console.error("Error sending message:", error);
                alert("Error sending message. Check console for details.");
            }
        }

        async function loadChatHistory(chatId) {
            currentChatId = chatId;
            document.getElementById('currentChatId').value = chatId;

            try {
                const token = localStorage.getItem("jwtToken");
                const response = await fetch(`/ChatHub/index?handler=ChatHistory&chatId=${chatId}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const chatHistoryHtml = await response.text();
                    document.getElementById('messageContainer').innerHTML = chatHistoryHtml;
                    document.getElementById('chatInput').style.display = 'block';
                    
                    // Scroll to bottom of chat
                    const messageContainer = document.getElementById('messageContainer');
                    messageContainer.scrollTop = messageContainer.scrollHeight;

                    document.getElementById('OtherUserId').value = @Model.OtherUserId;
                } else {
                    console.error("Failed to load chat history.");
                }
            } catch (error) {
                console.error("Error loading chat history:", error);
            }
        }

        async function fetchChatList() {
            try {
                const token = localStorage.getItem("jwtToken"); 

                const response = await fetch('/ChatHub/index?handler=ChatList', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`, // Include the token in the Authorization header
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log("Fetched chat list:", result);

                    displayChatList(result);
                } else {
                    console.error("Failed to fetch chat list.");
                }
            } catch (error) {
                console.error("Error fetching chat list:", error);
            }
        }

        // Function to display the chat list in the conversationList div
        function displayChatList(chatList) {
            const conversationList = document.getElementById('conversationList');
            conversationList.innerHTML = '';

            if (chatList.length > 0) {
                chatList.forEach(chat => {

                    const otherUser = chat.user1Id === @Model.CurrentUserId ? chat.user2 : chat.user1;
                    const otherUserName = otherUser?.firstName || "Unknown";
                    
                    // Get last message details
                    const lastMessage = chat.messagesJson?.length > 0 
                        ? getLastMessageDetails(chat.messagesJson.slice(-1)[0])
                        : {
                            text: "No messages yet",
                            time: "",
                            isRead: true,
                            isCurrentUser: false
                        };

                    // Format time if exists
                    const messageTime = lastMessage.time 
                        ? formatMessageTime(lastMessage.time)
                        : "";

                    // Create chat item
                    const chatItem = document.createElement('div');
                    chatItem.className = `conversation-item ${!lastMessage.isRead ? 'unread' : ''}`;
                    chatItem.setAttribute('data-chat-id', chat.id);
                    chatItem.onclick = () => loadChatHistory(chat.id);

                    chatItem.innerHTML = `
                        <div class="conversation-avatar">
                            <img src="${otherUser?.avatarUrl || '/images/default-avatar.png'}" 
                                alt=" " />
                            ${!lastMessage.isRead && !lastMessage.isCurrentUser ? '<span class="unread-badge"></span>' : ''}
                            ${!lastMessage.isRead ? '<span class="unread-badge"></span>' : ''}
                        </div>
                        <div class="conversation-details">
                            <div class="conversation-header">
                                <h5>${otherUserName}</h5>
                                <span class="message-time">${messageTime}</span>
                            </div>
                            <p class="message-preview ${!lastMessage.isRead ? 'unread' : ''}">
                                @* ${lastMessage.isCurrentUser ? 'You: ' : ''} *@
                                ${truncateMessage(lastMessage.text, 30)}
                            </p>
                        </div>
                    `;

                    conversationList.appendChild(chatItem);
                });
            } else {
                conversationList.innerHTML = `
                    <div class="no-conversations">
                        <i class="far fa-comment-dots"></i>
                        <p>No conversations found</p>
                    </div>
                `;
            }
        }

        function getLastMessageDetails(message) {
            return {
                text: message.message || "",
                time: message.timestamp,
                isRead: message.isRead,
                isCurrentUser: !message.receiverUserId === @Model.CurrentUserId
            };
        }

        function formatMessageTime(timestamp) {
            const messageDate = new Date(timestamp);
            const now = new Date();
            
            if (isToday(messageDate, now)) {
                return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            } else if (isYesterday(messageDate, now)) {
                return 'Yesterday';
            } else {
                return messageDate.toLocaleDateString();
            }
        }

        function isToday(date, now) {
            return date.getDate() === now.getDate() && 
                date.getMonth() === now.getMonth() && 
                date.getFullYear() === now.getFullYear();
        }

        function isYesterday(date, now) {
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            return date.getDate() === yesterday.getDate() && 
                date.getMonth() === yesterday.getMonth() && 
                date.getFullYear() === yesterday.getFullYear();
        }

        function truncateMessage(text, maxLength) {
            return text.length > maxLength 
                ? text.substring(0, maxLength) + '...' 
                : text;
        }
        document.addEventListener('DOMContentLoaded', fetchChatList);
    </script>
}